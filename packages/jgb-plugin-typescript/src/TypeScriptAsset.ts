import BabelAsset from 'jgb-plugin-babel/lib/BabelAsset';
import { IInitOptions } from 'jgb-shared';
import SourceMap from 'jgb-shared/lib/SourceMap';
import { pathToUnixType, safeLocalRequire } from 'jgb-shared/lib/utils';
import * as Typescript from 'typescript';

export default class TypeScriptAsset extends BabelAsset {
  static outExt = '.js';

  constructor(fileName: string, options: IInitOptions) {
    super(fileName, options);
  }

  async parse(code: string) {
    // require typescript, installed locally in the app
    const typescript = await safeLocalRequire(
      'typescript',
      this.name,
      () => Typescript
    );

    const transpilerOptions = {
      compilerOptions: {
        module: typescript.ModuleKind.ESNext,
        jsx: typescript.JsxEmit.Preserve,

        // it brings the generated output from TypeScript closer to that generated by Babel
        // see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html
        esModuleInterop: true,
        noEmit: false,
        sourceMap: true
      },
      fileName: this.relativeName
    };

    const tsconfig = await this.getConfig(['tsconfig.json']);

    // Overwrite default if config is found
    if (tsconfig) {
      transpilerOptions.compilerOptions = Object.assign(
        transpilerOptions.compilerOptions,
        tsconfig.compilerOptions
      );
    }
    transpilerOptions.compilerOptions.noEmit = false;
    transpilerOptions.compilerOptions.sourceMap = true; // this.options.sourceMaps;

    // Transpile Module using TypeScript and parse result as ast format through babylon
    const transpiled = typescript.transpileModule(code, transpilerOptions);

    let sourceMap = transpiled.sourceMapText;

    if (sourceMap) {
      sourceMap = JSON.parse(sourceMap);
      sourceMap.sources = [pathToUnixType(this.relativeName)];
      sourceMap.sourcesContent = [this.contents];

      // Remove the source map URL
      const content = transpiled.outputText;
      transpiled.outputText = content.substring(
        0,
        content.lastIndexOf('//# sourceMappingURL')
      );

      this.sourceMap = await new SourceMap().addMap(sourceMap);
    }

    // 备用输出内容
    this.outputCode = transpiled.outputText;

    return super.parse(transpiled.outputText);
  }
}
